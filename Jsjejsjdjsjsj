using System.Data.SQLite;

void MigracjaHasel()
{
    string dbPath = Path.Combine(FileSystem.AppDataDirectory, "users.db"); // lub ścieżka twojej bazy
    using var connection = new SQLiteConnection($"Data Source={dbPath};Version=3;");
    connection.Open();

    string selectQuery = "SELECT Id, Haslo FROM Users"; // zakładamy, że tabela to Users, z kolumnami Id i Haslo
    using var command = new SQLiteCommand(selectQuery, connection);
    using var reader = command.ExecuteReader();

    var usersToUpdate = new List<(int Id, string Haslo)>();

    while (reader.Read())
    {
        int id = reader.GetInt32(0);
        string haslo = reader.GetString(1);

        if (!haslo.Contains("$")) // jeśli hasło nie jest już zahashowane
        {
            string hashed = PasswordHelper.HashPassword(haslo);
            usersToUpdate.Add((id, hashed));
        }
    }

    reader.Close();

    foreach (var (id, newHaslo) in usersToUpdate)
    {
        using var updateCommand = new SQLiteCommand("UPDATE Users SET Haslo = @haslo WHERE Id = @id", connection);
        updateCommand.Parameters.AddWithValue("@haslo", newHaslo);
        updateCommand.Parameters.AddWithValue("@id", id);
        updateCommand.ExecuteNonQuery();
    }

    connection.Close();
}







using System;
using System.Security.Cryptography;
using System.Text;

public static class PasswordHelper
{
    public static string HashPassword(string password)
    {
        byte[] salt = RandomNumberGenerator.GetBytes(16); // 128-bit
        var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 100_000, HashAlgorithmName.SHA256);
        byte[] hash = pbkdf2.GetBytes(32); // 256-bit hash

        byte[] hashBytes = new byte[48];
        Array.Copy(salt, 0, hashBytes, 0, 16);
        Array.Copy(hash, 0, hashBytes, 16, 32);

        return Convert.ToBase64String(hashBytes);
    }

    public static bool VerifyPassword(string password, string hashedPassword)
    {
        byte[] hashBytes = Convert.FromBase64String(hashedPassword);
        byte[] salt = new byte[16];
        Array.Copy(hashBytes, 0, salt, 0, 16);

        var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 100_000, HashAlgorithmName.SHA256);
        byte[] hash = pbkdf2.GetBytes(32);

        for (int i = 0; i < 32; i++)
            if (hashBytes[i + 16] != hash[i])
                return false;

        return true;
    }
}

string hashedPassword = PasswordHelper.HashPassword(password);
User newUser = new User(name, surname, email, hashedPassword, admPass);

string newPassword = await DisplayPromptAsync(...);
string hashedPassword = PasswordHelper.HashPassword(newPassword);
userToEdit.edycjaDanych(newName, newSurname, hashedPassword);

string hashedPassword = PasswordHelper.HashPassword(newPassword);
if(loginPage.LoggedInUser.zmianaHasla(hashedPassword))

var user = userManager.ListaUzytkownikow.FirstOrDefault(u => u.Email == email);
if (user != null && PasswordHelper.VerifyPassword(password, user.Haslo))
{
    LoggedInUser = user;
    ...
}
else
{
    ErrorLabel.Text = "Niepoprawny e-mail lub hasło!";
}


string newPassword = await DisplayPromptAsync("Edycja użytkownika", $"Podaj nowe hasło dla {userToEdit.Email}", initialValue: "");


string newPassword = await DisplayPromptAsync("Edycja użytkownika", $"Podaj nowe hasło dla {userToEdit.Email}", initialValue: "");

string finalPassword = string.IsNullOrWhiteSpace(newPassword)
    ? userToEdit.Haslo  // nie zmieniaj
    : PasswordHelper.HashPassword(newPassword);

userToEdit.edycjaDanych(newName, newSurname, finalPassword);
